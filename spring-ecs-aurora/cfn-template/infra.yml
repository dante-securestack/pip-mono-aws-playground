Description: 'CloudFormation template that deploys the underlying infra + creates an ECR repo'

Parameters:

  #
  # Bastion
  #

  BastionAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: 'Bastion AMI ID.'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2 

  BastionInstanceType:
    Description: Bastion EC2 instance type
    Type: String
    Default: t4g.nano

  BastionSshKeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the bastion host
    Type: AWS::EC2::KeyPair::KeyName

  BastionSshLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  
  #
  # RDS
  #

  DBInstanceID:
    Default: springapp-db
    Description: Database Instance Identifier
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9-]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.

  DBName:
    Default: springapp
    Description: Database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.

  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '50'
    ConstraintDescription: Must be between 5 and 50 GiB.

Resources:

  #
  # VPC
  #

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'
        
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-InternetGateway'
        
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
 
  NATEIPA:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc  
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NAT-A-EIP'
      
  NATEIPB:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc  
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NAT-A-EIP'
 
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-SubnetAPublic'
      - Key: Reach
        Value: public
        
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.16.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-SubnetAPrivate'
      - Key: Reach
        Value: private
        
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-SubnetBPublic'
      - Key: Reach
        Value: public
        
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: '10.0.48.0/20'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-SubnetBPrivate'
      - Key: Reach
        Value: private
        
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-RouteTablePublic'

  RouteTableAPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-RouteTableAPrivate'
        
  RouteTableBPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-RouteTableBPrivate'

  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
      
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate
      
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
      
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate
      
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NetworkAclPublic'

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NetworkAclPrivate'

  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclPublic
      
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclPrivate
      
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclPublic
      
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclPrivate
      
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
      
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NATGatewayA:
    DependsOn: VPC
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATEIPA,AllocationId]      
      SubnetId: !Ref SubnetAPublic
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGatewayA'

  NATGatewayB:
    DependsOn: VPC
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NATEIPB,AllocationId]      
      SubnetId: !Ref SubnetBPublic
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGatewayB'
      
  RouteTablePrivateANATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA

  RouteTablePrivateBNATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB

  #
  # Bastion
  #
  
  BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref BastionInstanceType
      ImageId: !Ref BastionAMIID
      KeyName: !Ref BastionSshKeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref BastionNetworkInterface
          DeviceIndex: 0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Bastion'

  BastionNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Interface used by bastion host
      SubnetId: !Ref SubnetAPublic
      GroupSet:
        - !Ref BastionSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-BastionENI'

  BastionEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Bastion-EIP'

  AssociateBastionEIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt BastionEIP.AllocationId
      NetworkInterfaceId: !Ref BastionNetworkInterface

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionSshLocation
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-BastionSecurityGroup'
  
  #
  # RDS
  #

  DatabaseSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub '${AWS::StackName}-DatabaseSecret'
      Description: "Database secret with a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "springapp"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  DatabaseInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: postgres
      MasterUsername: !Sub '{{resolve:secretsmanager:${AWS::StackName}-DatabaseSecret:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${AWS::StackName}-DatabaseSecret:SecretString:password}}'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn: DatabaseSecret

  DatabaseSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: Private database subnet group
      SubnetIds:
        - !Ref SubnetAPrivate
        - !Ref SubnetBPrivate
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-DatabaseSubnetGroup'

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to DBInstance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId:
            Fn::GetAtt:
              - BastionSecurityGroup
              - GroupId
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-DatabaseSecurityGroup'

  #
  # ECR
  #

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: "springapp-repo"
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-EcrRepository'

  #
  # ALB
  #

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-LoadBalancer'
      Type: 'application'
      Subnets:
        - !Ref SubnetAPublic
        - !Ref SubnetBPublic
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable inbound traffic to ALB and outbound traffic to ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-LoadBalancerSecurityGroup'

  #
  # ECS
  #
 
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-EcsCluster'


Outputs:

  #
  # VPC
  #

  Vpc:
    Description: 'Vpc'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-Vpc'
      
  CidrBlock:
    Description: 'The set of IP addresses for the VPC'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
    
  AvailabilityZoneA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneA'
      
  AvailabilityZoneB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneB'
      
  SubnetsPublic:
    Description: 'Subnets public'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
      
  SubnetsPrivate:
    Description: 'Subnets private'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
      
  SubnetAPublic:
    Description: 'Subnet A public'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
      
  SubnetAPrivate:
    Description: 'Subnet A private'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
      
  SubnetBPublic:
    Description: 'Subnet B public'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'

  SubnetBPrivate:
    Description: 'Subnet B private'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'

  #
  # Bastion
  #

  BastionPublicIp:
    Description: 'Bastion Instance IP address'
    Value: !GetAtt BastionInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-BastionPublicIp'

  #
  # RDS
  #
  
  DatabaseSecurityGroup:
    Description: 'Security group used by database'
    Value: !GetAtt DatabaseSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecurityGroup'

  DatabaseSecretName:
    Description: 'Database secret name'
    Value: !Sub '${AWS::StackName}-DatabaseSecret'
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecretName'
  
  DBName:
    Description: 'Database name'
    Value: !Sub '${DBName}'
    Export:
      Name: !Sub '${AWS::StackName}-DBName'

  DatabaseEndpoint:
    Description: 'Connection endpoint for the database'
    Value: !GetAtt DatabaseInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'


  #
  # ECR
  #
  
  EcrRepositoryUrl:
    Description: 'Docker repository URL'
    Value: !GetAtt EcrRepository.RepositoryUri
    Export:
      Name: !Sub '${AWS::StackName}-EcrRepositoryUrl'

  #
  # ECS
  #

  EcsCluster:
    Description: 'ECS Cluster'
    Value: !Ref EcsCluster
    Export:
      Name: !Sub '${AWS::StackName}-EcsCluster'

  #
  # ALB
  # 

  LoadBalancerArn:
    Description: 'App load balancer ARN'
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerArn'

  LoadBalancerUrl:
    Description: 'App load balancer URL'
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerUrl'
